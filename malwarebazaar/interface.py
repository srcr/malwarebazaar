  
import requests

from snake import config
from snake import db
from snake import error
from snake import fields
from snake import scale
from snake.utils import markdown as md

# Global things
API_KEY = config.scale_configs['malwarebazaar']['api_key']
API_ENDPOINT = 'https://mb-api.abuse.ch/api/v1/'

PROXIES = {}
if config.snake_config['http_proxy']:
    PROXIES['http'] = config.snake_config['http_proxy']
if config.snake_config['https_proxy']:
    PROXIES['https'] = config.snake_config['https_proxy']

HEADERS = {
    "Accept-Encoding": "gzip, deflate",
    "User-Agent": config.constants.USER_AGENT,
    "API-KEY": API_KEY
}

# Interface things
class Interface(scale.Interface):
    def _malwarebazaar(self, sha256_digest, cache=True):
        params = {
            'query': 'get_info',
            'hash': sha256_digest
        }

        document = db.file_collection.select(sha256_digest)
        if 'malwarebazaar' not in document or not cache:
            try:
                response = requests.post(API_ENDPOINT,
                                        data=params,
                                        headers=HEADERS,
                                        proxies=PROXIES,
                                        timeout=10)
            except Exception:
                raise error.InterfaceWarning("failed to connect to MalwareBazaar")
            if 'application/json' not in response.headers.get('content-type'):
                raise error.InterfaceWarning("invalid response received from MalwareBazaar")
            data = {'malwarebazaar': response.json()}
            db.file_collection.update(sha256_digest, data)
            document = db.file_collection.select(sha256_digest)
            if not document or 'malwarebazaar' not in document:
                raise error.MongoError('error adding malwarebazaar into file document %s' % sha256_digest)
        if str(document['malwarebazaar']['query_status']) == 'hash_not_found':
            raise error.InterfaceWarning("File is not present on MalwareBazaar")
        if str(document['malwarebazaar']['query_status']) != 'ok':
            raise error.InterfaceWarning("An unexpected error occured")

        return document['malwarebazaar']

    def check(self):
        if not API_KEY:
            raise error.InterfaceError("config variable 'api_key' has not been set")

    @scale.pull({
        'args': {
            'cache': fields.Bool(missing=True)
        },
        'info': 'MalwareBazaar results report'
    })
    def results(self, args, file, opts):
        j = self._malwarebazaar(file.sha256_digest, cache=args['cache'])
        return j['data'][0]

    def results_markdown(self, json):
        output = md.h4('General Information')
        output += md.paragraph(md.bold('SHA256 hash: ') + str(json['sha256_hash']))
        output += md.paragraph(md.bold('SHA1 hash: ') + str(json['sha1_hash']))
        output += md.paragraph(md.bold('MD5 hash: ') + str(json['md5_hash']))
        output += md.paragraph(md.bold('File name: ') + str(json['file_name']))
        output += md.paragraph(md.bold('Signature: ') + str(json['signature']))
        output += md.paragraph(md.bold('File size: ') + str(json['file_size']) + " bytes")
        output += md.paragraph(md.bold('First seen: ') + str(json['first_seen']))
        output += md.paragraph(md.bold('Last seen: ') + str(json['last_seen']))
        output += md.paragraph(md.bold('File type: ') + str(json['file_type']))
        output += md.paragraph(md.bold('MIME type: ') + str(json['file_type_mime']))
        output += md.paragraph(md.bold('imphash: ') + str(json['imphash']))
        output += md.paragraph(md.bold('ssdeep: ') + str(json['ssdeep']))
        output += md.paragraph(md.bold('Delivery Method: ') + str(json['delivery_method']))
        if str(json['reporter']) == "anonymous":
            reporter = "*Anonymous*"
        else:
            reporter = "[@"+str(json['reporter'])+"](https://twitter.com/"+str(json['reporter'])+")"
        output += md.paragraph(md.bold('Reporter: ') + reporter)
        output += md.cr()
        output += md.h4('Intelligence')
        output += md.paragraph(md.bold('ClamAV: ') + str(json['intelligence']['clamav']))
        output += md.paragraph(md.bold('# of downloads: ') + str(json['intelligence']['downloads']))
        output += md.paragraph(md.bold('# of uploads: ') + str(json['intelligence']['uploads']))
        output += md.paragraph(md.bold('Mail intelligence: ') + str(json['intelligence']['mail']))
        output += md.cr()
        output += md.h4('File Information')
        output += md.paragraph(md.bold(str(json['file_information']['context'])+": ") + str(json['file_information']['value']))
        output += md.cr()
        output += md.paragraph(md.bold('Comment: ') + str(json['comment']))
        tl=''
        for t in json['tags']:
            tl += t + ','
        output += md.paragraph(md.bold('Tags: ') + str(tl[:-1]))
         
        return output


    # TODO: Do It!
    @scale.push({
        'info': 'submit file to MalwareBazaar'
    })
    def submit(self, args, file, opts):
        document = db.file_collection.select(file.sha256_digest)
        data = {
            'tags': tags,
            'delivery_method': delivery_method
        }
        files = {
            'json_data': (None, json.dumps(data), 'application/json'),
            'file': (open(file.file_path, "rb"))
        }
        
        try:
                response = requests.POST(API_ENDPOINT,
                                        files=files,
                                        headers=HEADERS,
                                        proxies=PROXIES,
                                        timeout=10)
        except requests.exceptions.RequestException:
            raise error.InterfaceError("failed to connect to MalwareBazaar")

        if not response.status_code == requests.codes.ok:
            raise error.InterfaceError('failed to submit sample to MalwareBazaar')

        json_data = json.loads(response.text)

        return json_data


    @scale.pull({
        'args': {
            'cache': fields.Bool(missing=True)
        },
        'info': 'MalwareBazaar general info report'
    })
    def info(self, args, file, opts):
        j = self._malwarebazaar(file.sha256_digest, cache=args['cache'])
        output = j['data'][0]
        return output

    def info_markdown(self, json):
        output = md.table_header(('Attribute', 'Value'))
        output += md.table_row(('MB Link', 'https://bazaar.abuse.ch/sample/' + str(json['sha256_hash'])))
        if str(json['reporter']) == "anonymous":
            reporter = "*Anonymous*"
        else:
            reporter = "[@"+str(json['reporter'])+"](https://twitter.com/"+str(json['reporter'])+")"
        output += md.table_row(('Reporter', reporter))
        output += md.table_row(('Comments', str(json['comment'])))
        tl=''
        for t in json['tags']:
            tl += t + ','
        output += md.table_row(('Tags', str(tl[:-1])))
        output += md.table_row(('ClamAV', str(json['intelligence']['clamav'])))
        output += md.table_row(('First seen', str(json['first_seen'])))
        output += md.table_row(('Last seen', str(json['last_seen'])))
        return output
